# -*- coding: utf-8 -*-
"""Personalized_News_Bot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VRU41XSjeOqIH6DFRFF45-5MgT2gSsa2
"""

import requests
from dataclasses import dataclass
from bs4 import BeautifulSoup
from bs4.element import Comment
from datetime import datetime
from dateutil import parser
from urllib.parse import urlparse
import newspaper
import os
import logging

# You can get these for free
news_api_params = {
    'bing_search' : {
        'api_key'       : os.environ.get('bing_api_key'),
        'endpoint'      : 'https://api.bing.microsoft.com/{version}/{endpoint}',
        'version'       : 'v7.0',
        'market'        : 'en-US',
        'search_endpt'  : 'search',
        'news_endpt'    : 'news'
    },
    'news_org' : {
        'api_key'       : os.environ.get('news_org_api_key'),
        'endpoint'      : 'https://newsapi.org/{version}/{endpoint}',
        'version'       : 'v2',
        'search_endpt'  : 'everything',
        'news_endpt'    : 'top-headlines'
    },
    'news_data' : {
        'api_key'       : os.environ.get('news_data_api_key'),
        'endpoint'      : 'https://newsdata.io/api/{version}/{endpoint}',
        'version'       : '1',
        'language'      : 'en',
        'country'       : 'us',
        'news_endpt'    : 'news'
    }
}

class KeyNotFoundError(Exception):
    pass

@dataclass
class Article:
    api_src     : str
    url         : str
    title       : str
    source      : str
    time        : datetime
    description : str       = 'No description provided'
    text        : str       = 'None'
    img_url     : str       = None

    def __str__(self):
        return f'''Article from {self.api_src} - url:"{self.url}", \
        title:"{self.title}", src:"{self.source}", dt:"{self.time}", \
        desc:"{self.description[:10]}...", img_url:"{self.img_url}"'''

    def __repr__(self):
        return self.__str__()

    @property
    def time_str(self):
        return self.time.strftime('%Y-%m-%d %H-%M-%S')
    
    def get_json(self):
        return {
            'api_src'       : self.api_src,
            'url'           : self.url,
            'title'         : self.title,
            'source'        : self.source,
            'time'          : self.time_str,
            'description'   : self.description,
            'text'          : self.text,
            'img_url'       : self.img_url
        }

class NewsQuery:
    CATEGORIES = ['Business', 'Entertainment', 'General', 'Health', 'Science', 
                  'Technology','Politics', 'Sports']
    SUBCATEGORIES = {
        'Entertainment' : ['Movies and TV', 'Music'],
        'Sports' : ['Golf', 'MLB', 'NBA', 'NFL', 'NHL',
                    'Soccer', 'Tennis', 'CFB', 'CBB']
    }
    def __init__(self, category:str, subcategory:str=None):
        if category in self.CATEGORIES:
            self._category = category
        else:
            raise ValueError(f'Invalid category: `{category}`')

        if subcategory is not None:
            if subcategory in self.SUBCATEGORIES[category]:
                self._subcategory = subcategory
            else:
                raise ValueError(f'Invalid subcategory `{subcategory}` for category `{category}`')
        else:
            self._subcategory = None

    @property
    def category(self):
        return self._category

    @property
    def subcategory(self):
        return self._subcategory

@dataclass
class NewsAPI:
    api_key: str
    endpoint: str

    def _text(self, url):
        webpage = requests.get(url, timeout=2)
        webpage.raise_for_status()
        try:
            text = self._text_from_url(url)
        except:
            text = self._text_from_html(webpage.content)
        return text
    
    def _tag_visible(self, element):
        if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:
            return False
        if isinstance(element, Comment):
            return False
        return True

    def _text_from_html(self, body):
        soup = BeautifulSoup(body, 'html.parser')
        texts = soup.findAll(string=True)
        visible_texts = filter(self._tag_visible, texts)
        return ' '.join(t.strip() for t in visible_texts)

    def _text_from_url(self, url:str):
        article = newspaper.Article(url=url, language='en')
        article.download()
        article.parse()
        return article.text

    def search(self, query:str, **kwargs)->list[Article]:
        raise NotImplementedError('Search method has not been implemented by this class.')

    def news(self, category:str, **kwargs)->list[Article]:
        raise NotImplementedError('News method has not been implemented by this class.')

@dataclass
class BingNewsAPI(NewsAPI):
    CATEGORIES = {
        'Business':{'name':'Business'},
        'Entertainment':{'name':'Entertainment',
            'subcats': {'Movies and TV':'Entertainment_MovieAndTV', 'Music':'Entertainment_Music'}},
        'General':{'name':None},
        'Health':{'name':'Health'},
        'Science':{'name':'Science'},
        'Sports':{'name':'Sports',
            'subcats': {'Golf':'Sports_Golf', 'MLB':'Sports_MLB', 'NBA':'Sports_NBA', 'NFL':'Sports_NFL',
                        'NHL':'Sports_NHL', 'Soccer':'Sports_Soccer', 'Tennis':'Sports_Tennis',
                        'CFB':'Sports_CFB', 'CBB':'Sports_CBB'}},
        'Technology':{'name':'Technology'}
    }
    api_key     : str
    endpoint    : str
    version     : str = 'v7.0'
    market      : str = 'en-US'
    search_endpt: str = 'search'
    news_endpt  : str = 'news'

    @property
    def search_url(self)->str:
        return self.endpoint.format(version=self.version, endpoint=self.search_endpt)

    @property
    def news_url(self)->str:
        return self.endpoint.format(version=self.version, endpoint=self.news_endpt)

    def _parse_article(self, src:str, article_dict:dict)->Article:
        try:
            date_published = parser.parse(article_dict['datePublished'])
        except KeyError:
            date_published = None

        try:
            article_text = self._text(article_dict['url'])
        except:
            article_text = 'Error!'

        return Article(
            src,
            article_dict['url'],
            article_dict['name'],
            article_dict.get('provider', [dict()])[0].get('name', 'Unknown'),
            date_published,
            description = article_dict.get('description', 'No description provided'),
            text = article_text,
            img_url = article_dict.get('image', dict()).get('thumbnail', dict()).get('contentUrl')
        )

    def search(self, query:str, **kwargs)->list[Article]:
        params = { 'q': query, 'mkt': self.market }
        headers = { 'Ocp-Apim-Subscription-Key': self.api_key }
        r = requests.get(self.search_url, headers=headers, params=params, **kwargs)
        return [self._parse_article('BingSearch', a) for a in r.json()['webPages']['value']]

    def news(self, news_query:NewsQuery, **kwargs)->list[Article]:
        params = {'mkt': self.market }
        category, subcategory = news_query.category, news_query.subcategory
        cat = self.CATEGORIES[category]['name']
        if cat is not None:
            if subcategory is None:
                params['category'] = cat
            else:
                params['category'] = self.CATEGORIES[category]['subcats'][subcategory]
        headers = { 'Ocp-Apim-Subscription-Key': self.api_key }
        r = requests.get(self.news_url, headers=headers, params=params, **kwargs)
        return [self._parse_article('BingNews', a) for a in r.json()['value']]

@dataclass
class NewsOrgAPI(NewsAPI):
    CATEGORIES = {
        'Business':{'name':'business'},
        'Entertainment':{'name':'entertainment',
            'subcats': {'Movies and TV':'Movies and TV', 'Music':'Music'}},
        'General':{'name':'general'},
        'Health':{'name':'health'},
        'Science':{'name':'science'},
        'Sports':{'name':'sports',
            'subcats': {'Golf':'Golf', 'MLB':'MLB', 'NBA':'NBA', 'NFL':'NFL',
                        'NHL':'NHL', 'Soccer':'Soccer', 'Tennis':'Tennis',
                        'CFB':'CFB', 'CBB':'CBB'}},
        'Technology':{'name':'technology'}
    }
    api_key     : str
    endpoint    : str
    version     : str = 'v2'
    language    : str = 'en'
    sort_by     : str = 'relevancy'
    page_size   : int = 25
    search_endpt: str = 'everything'
    news_endpt  : str = 'top-headlines'

    @property
    def search_url(self)->str:
        return self.endpoint.format(version=self.version, endpoint=self.search_endpt)

    @property
    def news_url(self)->str:
        return self.endpoint.format(version=self.version, endpoint=self.news_endpt)

    def _parse_article(self, article_dict:dict)->Article:
        description = 'No description provided.' if article_dict.get('description') is None else article_dict.get('description')

        try:
            article_text = self._text(article_dict['url'])
        except:
            article_text = 'Error!'

        return Article(
            'NewsOrg',
            article_dict['url'],
            article_dict['title'],
            article_dict.get('source', dict()).get('name', 'Unknown'),
            parser.parse(article_dict['publishedAt']),
            description = description,
            text = article_text,
            img_url = article_dict.get('urlToImage')
        )

    def search(self, query:str, **kwargs)->list[Article]:
        params = { 'q': query, 'language': self.language, 'sortBy': self.sort_by, 'pageSize': self.page_size, **kwargs}
        headers = { 'X-Api-Key': self.api_key}
        r = requests.get(self.search_url, headers=headers, params=params)
        r.raise_for_status()
        return [self._parse_article(a) for a in r.json()['articles']]

    def news(self, news_query:NewsQuery, **kwargs)->list[Article]:
        category, subcategory = news_query.category, news_query.subcategory
        cat = self.CATEGORIES[category]['name']
        params = { 'category': cat, 'language': self.language, 'pageSize': self.page_size, **kwargs}
        headers = { 'X-Api-Key': self.api_key}
        if subcategory is not None:
            subcat = self.CATEGORIES[category]['subcats'][subcategory]
            params['q'] = subcat
        r = requests.get(self.news_url, headers=headers, params=params)
        r.raise_for_status()
        return [self._parse_article(a) for a in r.json()['articles']]

@dataclass
class NewsDataAPI(NewsAPI):
    CATEGORIES = {
        'Business':{'name':'business'},
        'Entertainment':{'name':'entertainment'},
        'General':{'name':None},
        'Health':{'name':'health'},
        'Food' : {'name':'food'},
        'Science':{'name':'science'},
        'Politics' : {'name':'politics'},
        'Sports':{'name':'sports'},
        'Technology':{'name':'technology'},
        'World' : {'name':'world'}
    }
    api_key     : str
    endpoint    : str
    version     : str = '1'
    language    : str = 'en'
    country     : str = 'us'
    news_endpt  : str = 'news'

    @property
    def news_url(self)->str:
        return self.endpoint.format(version=self.version, endpoint=self.news_endpt)

    def _parse_article(self, article_dict:dict)->Article:
        return Article(
            'NewsData',
            article_dict['link'],
            article_dict['title'],
            article_dict.get('source_id', 'Unknown'),
            parser.parse(article_dict['pubDate']),
            description = article_dict['description'],
            text = article_dict['content'],
            img_url = article_dict.get('image_url')
        )

    def news(self, news_query:NewsQuery, **kwargs)->list[Article]:
        category = self.CATEGORIES[news_query.category]['name']

        headers = {'X-ACCESS-KEY' : self.api_key}
        params = {'category':category, 'language':self.language, 'country':self.country}
        r = requests.get(self.news_url, headers=headers, params=params)
        r.raise_for_status()
        return [self._parse_article(a) for a in r.json()['results']]

class NewsFetcher:
    def __init__(self, news_apis : list[NewsAPI], /,):
        self.news_apis = news_apis

    def get_results(self, query:str, api:NewsAPI):
        return api.search(query)

    def _filter(self, articles:list[Article])->list[Article]:
        filtered = []
        for article in articles:

            # remove msn articles (can't be summarized properly)
            domain = urlparse(article.url).netloc
            if domain == 'www.msn.com':
                continue

            # remove youtube articles
            if domain == 'www.youtube.com':
                continue

            # remove articles with no image
            if (article.img_url is None) or (article.img_url == 'None'):
                continue

            # any other filters go here
            # ...

            # add to list if not yet filtered out
            filtered.append(article)

        return filtered

    def process_articles(self, articles:list[Article])->list[Article]:
        processed_articles = []
        for article in self._filter(articles):

            # Remove articles that are too small
            try:
                if len(article.text)<100:
                    continue
            except TypeError:
                continue

            processed_articles.append(article)

        if len(processed_articles)==0:
            print('No articles to process')
            return []

        return processed_articles

    def news(self, news_query:NewsQuery, /, *, max_articles:int=10):
        all_articles = {}

        for news_api in self.news_apis:
            article_list = news_api.news(news_query)
            for article in article_list:
                all_articles[article.url] = article
        all_articles = [a for u,a in all_articles.items()]
        all_articles = self.process_articles(all_articles)
        return all_articles[:max_articles]

def generate_data(search_params:dict):
    # Initialize the news apis
    news_apis = []
    if news_api_params['news_org']['api_key'] is not None:
        news_org_api = NewsOrgAPI(**news_api_params['news_org'])
        news_apis.append(news_org_api)
    if news_api_params['bing_search']['api_key'] is not None:
        bing_api = BingNewsAPI(**news_api_params['bing_search'])
        news_apis.append(bing_api)
    if news_api_params['news_data']['api_key'] is not None:
        news_data_api = NewsDataAPI(**news_api_params['news_data'])
        news_apis.append(news_data_api)

    # Initialize the news fetcher
    if len(news_apis) > 0:
        news_fetcher = NewsFetcher(news_apis)
        logging.info('Ready to fetch news')
    else:
        raise KeyNotFoundError('No API keys provided to get the news')

    results = {}
    for qi in search_params['categories']:
        logging.info(f'Fetching news for {qi}')
        query = NewsQuery(qi)
        articles = news_fetcher.news(query, max_articles=search_params['num_articles'])
        results[qi] = [a for a in articles]
        logging.info(f'Fetched {len(articles)} articles for {qi}')
    
    return results

